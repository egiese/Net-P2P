import java.io.*;
import java.net.*;

/**
 * Simple TCP server thread that starts up and waits for TCP connections and
 * echos what is sent capitalized. This is an adaption of the code provided by
 * the Computer Networking: A Top Down Approach book by Kurose and Ross
 *
 * @author Chad Williams
 * @additions from Mudassar and Elliot
 */
public class TCPServer extends Thread 
{
	private int port;

	public TCPServer(String name, int port) 
	{
		super(name);
		this.port = port;
	}

	String clientQuery;
	String answer;

    /*
     * Code to transfer a file to a client making a request
     * The client sents the exact filepath through the socket, and the server
     * returns "200 OK" if the file exists, and "404 NOT FOUND" if not
     * After the message is sent, if the code was 200, then the server will
     * begin transferring the file.
     * Threading supports multiple clients connecting and transferring at the same time
     */
	public void run() 
	{
		ServerSocket serverSocket = null;
    
		// Try to open serversocket and begin to listen/accept connections from clients
		try 
		{
			serverSocket = new ServerSocket(this.port);
			
			while (true) 
			{
				String clientResponse;
				System.out.println("SERVER accepting connections");
				Socket clientConnectionSocket = serverSocket.accept();
				System.out.println("SERVER accepted connection (single threaded so others wait)");

				// Read the incoming query from a client and extract the filepath
				while (clientConnectionSocket.isConnected() && !clientConnectionSocket.isClosed()) 
				{
					BufferedReader inFromClient = new BufferedReader(new InputStreamReader(clientConnectionSocket.getInputStream()));
					DataOutputStream outToClient = new DataOutputStream(clientConnectionSocket.getOutputStream());
					clientQuery = inFromClient.readLine();
					answer = "500 PROBLEM";
          
					// Check if the exact filepath exists on the client, then create msg
					try
					{
						File f = new File(clientQuery);
						if(f.exists())
							answer = "200 OK";
						else
							answer = "404 NOT FOUND";
					}
					catch(Exception e)
		            {
		        	  System.out.println("File error");
		            }
          
					// Note if this returns null it means the client closed the connection
					if (clientQuery != null) 
					{
						System.out.println("SERVER Received: " + clientQuery);
						clientResponse = answer + '\n';
						System.out.println("SERVER responding: " + clientResponse);
						outToClient.writeBytes(clientResponse);
            
						// Attempt to transfer the file via byteArrays and OutputStreams
						if(answer.equals("200 OK"))
						{
							System.out.println("Server transfering...");
							try
							{
								System.out.println("Client query = " + clientQuery);
								File transferFile = new File (clientQuery);	        		
								byte [] bytearray = new byte [(int)transferFile.length()];
								FileInputStream fin = new FileInputStream(transferFile);
								BufferedInputStream bin = new BufferedInputStream(fin);
								bin.read(bytearray,0,bytearray.length);
								OutputStream os = clientConnectionSocket.getOutputStream();
								System.out.println("Sending Files..");
								os.write(bytearray,0,bytearray.length);
								os.flush(); 
								clientConnectionSocket.close();
								bin.close();
								System.out.println("File transfer complete");
							}
							catch(Exception e)
							{
								e.printStackTrace();
								System.out.println("Transfer error");
							}
						}
					} 
					else 
					{
						clientConnectionSocket.close();
						System.out.println("SERVER client connection closed");
					}
				}
			}
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
			{
				try 
				{
					serverSocket.close();
				} 
				catch (IOException ioe) 
				{
					// ignore
				}
			}
		}
	}
}
